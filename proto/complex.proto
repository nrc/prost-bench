syntax = "proto3";
package complex;

service Complex {
    rpc un(BatchCommandsRequest) returns (BatchCommandsResponse) {}
}

message BatchCommandsRequest {
    repeated Request requests = 1;
    repeated uint64 request_ids = 2;
    
    message Request {
        oneof cmd {
            GetRequest Get = 1;
            ScanRequest Scan = 2;
            PrewriteRequest Prewrite = 3;
            CommitRequest Commit = 4;
            ImportRequest Import = 5;
            CleanupRequest Cleanup = 6;
            BatchGetRequest BatchGet = 7;
            BatchRollbackRequest BatchRollback = 8;
            ScanLockRequest ScanLock = 9;
            ResolveLockRequest ResolveLock = 10;
            GCRequest GC = 11;
            DeleteRangeRequest DeleteRange = 12;
        }
    }
}

message BatchCommandsResponse {
    repeated Response responses = 1;
    repeated uint64 request_ids = 2;
    uint64 transport_layer_load = 3;

    message Response {
        oneof cmd {
            GetResponse Get = 1;
            ScanResponse Scan = 2;
            PrewriteResponse Prewrite = 3;
            CommitResponse Commit = 4;
            ImportResponse Import = 5;
            CleanupResponse Cleanup = 6;
            BatchGetResponse BatchGet = 7;
            BatchRollbackResponse BatchRollback = 8;
            ScanLockResponse ScanLock = 9;
            ResolveLockResponse ResolveLock = 10;
            GCResponse GC = 11;
            DeleteRangeResponse DeleteRange = 12;
        }
    }
}

message GetRequest {
    Context context = 1;
    bytes key = 2;
    uint64 version = 3;
}

message GetResponse {
    Error region_error = 1;
    KeyError error = 2;
    bytes value = 3;
}

message ScanRequest {
    Context context = 1;
    bytes start_key = 2;
    uint32 limit = 3;
    uint64 version = 4;
    bool key_only = 5;
    bool reverse = 6;
    // For compatibility, when scanning forward, the range to scan is [start_key, end_key), where start_key < end_key;
    // and when scanning backward, it scans [end_key, start_key) in descending order, where end_key < start_key.
    bytes end_key = 7;
}

message KvPair {
    KeyError error = 1;
    bytes key = 2;
    bytes value = 3;
}

message ScanResponse {
    Error region_error = 1;
    repeated KvPair pairs = 2;
}

enum Op {
    Put = 0;
    Del = 1;
    Lock = 2;
    Rollback = 3;
    // insert operation has a constraint that key should not exist before.
    Insert = 4;
}

enum Assertion {
     None = 0;
     Exist = 1;
     NotExist = 2;
}

message Mutation {
    Op op = 1;
    bytes key = 2;
    bytes value = 3;
    Assertion assertion = 4;
}

message PrewriteRequest {
    Context context = 1;
    repeated Mutation mutations = 2;
    // primary_lock_key
    bytes primary_lock = 3;
    uint64 start_version = 4;
    uint64 lock_ttl = 5;
    bool skip_constraint_check = 6;
}

message PrewriteResponse {
    Error region_error = 1;
    repeated KeyError errors = 2;
}

message CommitRequest {
    reserved 5;
    reserved "binlog";
    Context context = 1;
    uint64 start_version = 2;
    repeated bytes keys = 3;
    uint64 commit_version = 4;
}

message CommitResponse {
    Error region_error = 1;
    KeyError error = 2;
}

message ImportRequest {
    repeated Mutation mutations = 1;
    uint64 commit_version = 2;
}

message ImportResponse {
    Error region_error = 1;
    string error = 2;
}

message BatchRollbackRequest {
    Context context = 1;
    uint64 start_version = 2;
    repeated bytes keys = 3;
}

message BatchRollbackResponse {
    Error region_error = 1;
    KeyError error = 2;
}

message CleanupRequest {
    Context context = 1;
    bytes key = 2;
    uint64 start_version = 3;
}

message CleanupResponse {
    Error region_error = 1;
    KeyError error = 2;
    uint64 commit_version = 3; // set this if the key is already committed
}

message BatchGetRequest {
    Context context = 1;
    repeated bytes keys = 2;
    uint64 version = 3;
}

message BatchGetResponse {
    Error region_error = 1;
    repeated KvPair pairs = 2;
}

message ScanLockRequest {
    Context context = 1;
    uint64 max_version = 2;
    bytes start_key = 3;
    uint32 limit = 4;
}

message ScanLockResponse {
    Error region_error = 1;
    KeyError error = 2;
    repeated LockInfo locks = 3;
}

message TxnInfo {
    uint64 txn = 1;
    uint64 status = 2;
}

message ResolveLockRequest {
    Context context = 1;
    uint64 start_version  = 2;
    // If the txn is rolled back, do not set it.
    uint64 commit_version = 3;
    repeated TxnInfo txn_infos = 4;
}

message ResolveLockResponse {
    Error region_error = 1;
    KeyError error = 2;
}

message GCRequest {
    Context context = 1;
    uint64 safe_point = 2;
}

message GCResponse {
    Error region_error = 1;
    KeyError error = 2;
}

message RawGetRequest {
    Context context = 1;
    bytes key = 2;
    string cf = 3;
}

message RawGetResponse {
    Error region_error = 1;
    string error = 2;
    bytes value = 3;
}

message RawPutRequest {
    Context context = 1;
    bytes key = 2;
    bytes value = 3;
    string cf = 4;
}

message RawPutResponse {
    Error region_error = 1;
    string error = 2;
}

message RawBatchPutRequest {
    Context context = 1;
    repeated KvPair pairs = 2;
    string cf = 3;
}

message RawBatchPutResponse {
    Error region_error = 1;
    string error = 2;
}

message RawBatchGetRequest {
    Context context = 1;
    repeated bytes keys = 2;
    string cf = 3;
}

message RawBatchGetResponse {
    Error region_error = 1;
    repeated KvPair pairs = 2;
}

message RawDeleteRequest {
    Context context = 1;
    bytes key = 2;
    string cf = 3;
}

message RawDeleteResponse {
    Error region_error = 1;
    string error = 2;
}

message RawBatchDeleteRequest {
    Context context = 1;
    repeated bytes keys = 2;
    string cf = 3;
}

message RawBatchDeleteResponse {
    Error region_error = 1;
    string error = 2;
}

message DeleteRangeRequest {
    Context context = 1;
    bytes start_key = 2;
    bytes end_key = 3;
}

message DeleteRangeResponse {
    Error region_error = 1;
    string error = 2;
}


message NotLeader {
    uint64 region_id = 1;
}

message StoreNotMatch {
    uint64 request_store_id = 1;
    uint64 actual_store_id = 2;
}

message RegionNotFound {
    uint64 region_id = 1;
}

message KeyNotInRegion {
    bytes key = 1;
    uint64 region_id = 2;
    bytes start_key = 3;
    bytes end_key = 4;
}

message ServerIsBusy {
    string reason = 1;
    uint64 backoff_ms = 2;
}

message StaleCommand {
}

message RaftEntryTooLarge {
    uint64 region_id = 1;
    uint64 entry_size = 2;
}

message Error {
    reserved "stale_epoch";

    string message = 1;
    NotLeader not_leader = 2;
    RegionNotFound region_not_found = 3;
    KeyNotInRegion key_not_in_region = 4;
    ServerIsBusy server_is_busy = 5;
    StaleCommand stale_command = 6;
    StoreNotMatch store_not_match = 7;
    RaftEntryTooLarge raft_entry_too_large = 8;
}

message Context {
    reserved 4;
    reserved "read_quorum";
    uint64 region_id = 1;
    RegionEpoch region_epoch = 2;
    Peer peer = 3;
    uint64 term = 5;
    CommandPri priority = 6;
    IsolationLevel isolation_level = 7;
    bool not_fill_cache = 8;
    bool sync_log = 9;
    bool handle_time = 10; // true means return handle time detail
    bool scan_detail = 11; // true means return scan cf's detail
}


enum CommandPri {
    Normal = 0; // Normal must the default value
    Low = 1;
    High = 2;
}

enum IsolationLevel {
    SI = 0; // SI = snapshot isolation
    RC = 1; // RC = read committed
}

message RegionEpoch {
    // Conf change version, auto increment when add or remove peer
    uint64 conf_ver = 1;
    // Region version, auto increment when split or merge
    uint64 version = 2;
}

message Peer {      
    uint64 id = 1;
    uint64 store_id = 2;
    bool is_learner = 3;
}

message KeyError {
    LockInfo locked = 1; // Client should backoff or cleanup the lock then retry.
    string retryable = 2; // Client may restart the txn. e.g write conflict.
    string abort = 3; // Client should abort the txn.
    WriteConflict conflict = 4; // Write conflict is moved from retryable to here.
    AlreadyExist already_exist = 5; // Key already exists
}

message LockInfo {
    bytes primary_lock = 1;
    uint64 lock_version = 2;
    bytes key = 3;
    uint64 lock_ttl = 4;
}

message AlreadyExist {
    bytes key = 1;
}

message WriteConflict {
    uint64 start_ts = 1;
    uint64 conflict_ts = 2;
    bytes key = 3;
    bytes primary = 4;
}
